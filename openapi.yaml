components:
  schemas:
    HTTPValidationError:
      properties:
        detail:
          items:
            $ref: '#/components/schemas/ValidationError'
          title: Detail
          type: array
      title: HTTPValidationError
      type: object
    HealthResponse:
      description: Health check response model.
      properties:
        server:
          default: mcp-bigquery
          description: Server name
          title: Server
          type: string
        status:
          default: healthy
          description: Server health status
          title: Status
          type: string
        version:
          default: 1.0.0
          description: Server version
          title: Version
          type: string
      title: HealthResponse
      type: object
    MCPBatchRequest:
      description: MCP batch request model.
      example:
        requests:
        - id: 1
          jsonrpc: '2.0'
          method: tools/list
          params: {}
        - id: 2
          jsonrpc: '2.0'
          method: resources/list
          params: {}
      properties:
        requests:
          description: List of MCP requests to execute
          items:
            $ref: '#/components/schemas/MCPRequest'
          minItems: 1
          title: Requests
          type: array
      required:
      - requests
      title: MCPBatchRequest
      type: object
    MCPRequest:
      description: MCP JSON-RPC request model.
      examples:
      - id: 1
        jsonrpc: '2.0'
        method: initialize
        params:
          capabilities: {}
          clientInfo:
            name: my-app
            version: 1.0.0
          protocolVersion: '2024-11-05'
      - id: 2
        jsonrpc: '2.0'
        method: tools/call
        params:
          arguments:
            sql: SELECT COUNT(*) FROM `bigquery-public-data.usa_names.usa_1910_current`
          name: query
      properties:
        id:
          anyOf:
          - {}
          - type: 'null'
          description: Request ID (can be string, number, or null)
          title: Id
        jsonrpc:
          default: '2.0'
          description: JSON-RPC version (must be '2.0')
          title: Jsonrpc
          type: string
        method:
          description: MCP method name
          examples:
          - initialize
          - resources/list
          - resources/read
          - tools/list
          - tools/call
          title: Method
          type: string
        params:
          anyOf:
          - type: object
          - type: 'null'
          description: Method-specific parameters
          title: Params
      required:
      - method
      title: MCPRequest
      type: object
    MCPResponse:
      description: MCP JSON-RPC response model.
      examples:
      - id: 1
        jsonrpc: '2.0'
        result:
          protocolVersion: '2024-11-05'
          serverInfo:
            name: mcp-server/bigquery
            version: 0.1.0
      - id: 2
        jsonrpc: '2.0'
        result:
          content:
          - text: '[{"count": 42}]'
            type: text
      properties:
        error:
          anyOf:
          - type: object
          - type: 'null'
          description: Error information (code, message, data)
          title: Error
        id:
          anyOf:
          - {}
          - type: 'null'
          description: Request ID matching the request
          title: Id
        jsonrpc:
          default: '2.0'
          description: JSON-RPC version
          title: Jsonrpc
          type: string
        result:
          anyOf:
          - {}
          - type: 'null'
          description: Success result data
          title: Result
      title: MCPResponse
      type: object
    ValidationError:
      properties:
        loc:
          items:
            anyOf:
            - type: string
            - type: integer
          title: Location
          type: array
        msg:
          title: Message
          type: string
        type:
          title: Error Type
          type: string
      required:
      - loc
      - msg
      - type
      title: ValidationError
      type: object
info:
  description: "\n            HTTP transport for MCP (Model Context Protocol) BigQuery\
    \ server with streaming support.\n            \n            This API provides\
    \ access to Google BigQuery through the Model Context Protocol,\n            allowing\
    \ you to execute SQL queries, browse datasets, and read table schemas.\n     \
    \       \n            ## MCP Methods\n            \n            - **initialize**\
    \ - Initialize MCP session\n            - **resources/list** - List available\
    \ BigQuery datasets and tables  \n            - **resources/read** - Read table\
    \ schema information\n            - **tools/list** - List available tools (query\
    \ tool)\n            - **tools/call** - Execute SQL queries against BigQuery\n\
    \            \n            ## Authentication\n            \n            The server\
    \ uses Google Cloud service account authentication configured at startup.\n  \
    \          \n            ## Query Safety\n            \n            All SQL queries\
    \ are validated to ensure only read-only operations (SELECT statements) are allowed.\n\
    \            "
  title: MCP BigQuery Server
  version: 1.0.0
openapi: 3.1.0
paths:
  /health:
    get:
      description: Health check endpoint.
      operationId: health_check_health_get
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HealthResponse'
          description: Successful Response
      summary: Health Check
      tags:
      - Health
  /mcp:
    post:
      description: "Execute Model Context Protocol commands via JSON-RPC over HTTP.\n\
        \                      \n                      **Supported MCP methods:**\n\
        \                      - `initialize` - Initialize MCP session\n         \
        \             - `resources/list` - List available BigQuery datasets and tables\n\
        \                      - `resources/read` - Read table schema information\
        \  \n                      - `tools/list` - List available tools (query tool)\n\
        \                      - `tools/call` - Execute SQL queries against BigQuery"
      operationId: handle_mcp_request_mcp_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MCPResponse'
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Execute MCP JSON-RPC request
      tags:
      - MCP
  /mcp/batch:
    post:
      description: Handle batch MCP requests.
      operationId: handle_mcp_batch_mcp_batch_post
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MCPBatchRequest'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
        '422':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HTTPValidationError'
          description: Validation Error
      summary: Handle Mcp Batch
      tags:
      - MCP
  /mcp/stream:
    get:
      description: 'Server-Sent Events endpoint for streaming MCP responses.


        Establish a Server-Sent Events connection for streaming responses.

        Useful for long-running queries or real-time updates.


        **Usage:**

        - Connect to GET /mcp/stream

        - Receive events in text/event-stream format

        - Events include connection status and streaming data'
      operationId: stream_endpoint_mcp_stream_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Stream Endpoint
      tags:
      - Streaming
  /openapi.yaml:
    get:
      description: Serve OpenAPI specification in YAML format.
      operationId: get_openapi_yaml_openapi_yaml_get
      responses:
        '200':
          content:
            application/json:
              schema: {}
          description: Successful Response
      summary: Get Openapi Yaml
      tags:
      - Documentation
