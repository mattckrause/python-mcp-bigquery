# MCP BigQuery Server - Environment Configuration Sample
# Copy this file to .env and fill in your values

# ============================================
# AZURE DEPLOYMENT CONFIGURATION
# ============================================

# Unique environment name (alphanumeric, no spaces, max 64 characters)
# This will be part of your resource names
AZURE_ENV_NAME=mcp-bigquery

# Azure region for deployment
# Common options: centralus, eastus, westus2, westeurope, eastasia
AZURE_LOCATION=centralus

# ============================================
# GOOGLE CLOUD BIGQUERY CONFIGURATION  
# ============================================

# Your Google Cloud Project ID
# Find this in Google Cloud Console dashboard
GOOGLE_CLOUD_PROJECT_ID=your-project-id-here

# Google Cloud Service Account Credentials (JSON format)
# Download from Google Cloud Console > IAM & Admin > Service Accounts
# Copy the ENTIRE JSON content as a single line (no line breaks)
# Example format: {"type":"service_account","project_id":"your-project",...}
GOOGLE_SERVICE_ACCOUNT_CREDENTIALS={"type":"service_account","project_id":"your-project-id","private_key_id":"your-key-id","private_key":"-----BEGIN PRIVATE KEY-----\nYOUR-PRIVATE-KEY-HERE\n-----END PRIVATE KEY-----\n","client_email":"your-service-account@your-project.iam.gserviceaccount.com","client_id":"your-client-id","auth_uri":"https://accounts.google.com/o/oauth2/auth","token_uri":"https://oauth2.googleapis.com/token","auth_provider_x509_cert_url":"https://www.googleapis.com/oauth2/v1/certs","client_x509_cert_url":"https://www.googleapis.com/robot/v1/metadata/x509/your-service-account%40your-project.iam.gserviceaccount.com","universe_domain":"googleapis.com"}

# ============================================
# AUTHENTICATION CONFIGURATION (OPTIONAL)
# ============================================

# Enable authentication (true/false)
# Set to 'false' for development/testing
# Set to 'true' for production deployments
ENABLE_AUTH=false

# API Keys for authentication (comma-separated)
# Generate secure keys using: node -e "console.log(require('crypto').randomBytes(32).toString('hex'))"
# Example: key1,key2,key3
# Leave empty if ENABLE_AUTH=false or if you only want JWT authentication
API_KEYS=

# JWT Secret for token signing/validation (OPTIONAL - only needed for JWT tokens)
# Generate using: node -e "console.log(require('crypto').randomBytes(64).toString('hex'))"
# Leave empty if ENABLE_AUTH=false or if you only want API key authentication
# Note: You need this if you plan to generate/validate JWT tokens
JWT_SECRET=

# ============================================
# EXAMPLE CONFIGURATIONS
# ============================================

# OPTION 1: API Key Authentication Only (Recommended for most use cases)
# ENABLE_AUTH=true
# API_KEYS=a1b2c3d4e5f6789012345678901234567890abcdef1234567890123456789012,9876543210fedcba0987654321098765432109876543210987654321098765
# JWT_SECRET=

# OPTION 2: JWT Token Authentication Only (For custom token generation)
# ENABLE_AUTH=true
# API_KEYS=
# JWT_SECRET=supersecretjwtkey1234567890abcdefghijklmnopqrstuvwxyz0987654321fedcba0123456789abcdef1234567890123456789012345678901234567890

# OPTION 3: Both API Keys and JWT (Maximum flexibility)
# ENABLE_AUTH=true
# API_KEYS=a1b2c3d4e5f6789012345678901234567890abcdef1234567890123456789012
# JWT_SECRET=supersecretjwtkey1234567890abcdefghijklmnopqrstuvwxyz0987654321fedcba0123456789abcdef1234567890123456789012345678901234567890

# ============================================
# DEPLOYMENT NOTES
# ============================================
#
# 1. SECURITY: Never commit this .env file to version control
#    Add .env to your .gitignore file
#
# 2. GOOGLE CLOUD SETUP:
#    - Enable BigQuery API in your Google Cloud project
#    - Create a service account with BigQuery permissions:
#      * BigQuery Job User (to run queries)
#      * BigQuery Data Viewer (to read data) 
#      * Or custom roles with specific dataset permissions
#
# 3. AUTHENTICATION:
#    - For development: Keep ENABLE_AUTH=false
#    - For production: Set ENABLE_AUTH=true and choose your authentication method:
#      * API Keys only: Simple, secure, good for service-to-service communication
#      * JWT tokens only: Good for user sessions, token expiration, custom claims
#      * Both: Maximum flexibility, allows different client types
#    - You only need to set the secrets for the authentication method you choose
#
# 4. DEPLOYMENT:
#    - Run: azd up
#    - Access your API at the provided Azure Container Apps URL
#    - Health check: GET /health (always public)
#    - Query endpoint: POST /query (requires auth when enabled)
#
# 5. TROUBLESHOOTING:
#    - Check Azure logs: azd logs
#    - Verify Google Cloud permissions
#    - Ensure JSON credentials are properly formatted (single line, escaped quotes)
#
# ============================================
